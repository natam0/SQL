-- In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data.

-- 1. How many orders were placed in January?
SELECT count(*)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderid <> 'Order ID';

-- 2. How many of those orders were for an iPhone?
SELECT count(Product)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6 AND Product = 'iPhone';

-- 3. Select the customer account numbers for all the orders that were placed in February.
SELECT distinct customers.acctnum
FROM BIT_DB.customers
INNER JOIN BIT_DB.FebSales ON FebSales.orderID = customers.order_id
WHERE length(orderID) = 6;

-- 4. Which product was the cheapest one sold in January, and what was the price?
SELECT Product, price
FROM BIT_DB.JanSales Jan
WHERE length(orderID) = 6
ORDER BY price ASC LIMIT 1;

-- 5. What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).
SELECT Product, sum(Quantity) * price Revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
GROUP BY Product;

-- 6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT Product, Quantity, price, price*Quantity Revenue, location    /* I left in location and individual price do double check myself*/
FROM BIT_DB.FebSales
WHERE length(orderID) = 6 AND location = '548 Lincoln St, Seattle, WA 98101';

-- 7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT count(cust.acctnum), AVG(quantity*price) AvgSpent
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers cust
ON cust.order_id = FebSales.orderID
WHERE Quantity > 2 AND length(orderID) = 6;

-- Getting orders between the 13th and 18th
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

-- Finding the location of the order place at 1:35 on 2/18/19
SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35';

-- Finding how many orders were placed on 2/18/19 at any time
SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%';

-- Finding the products that include the word 'batteries'
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

-- Finding products priced with $.99
SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99';

-- Listing all the products sold in Los Angeles in February and how many of each were sold
SELECT Product, sum(Quantity)
FROM BIT_DB.FebSales
WHERE Location like '%Los Angeles%'
GROUP BY Product;

-- Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).
SELECT distinct location, count(orderID)
FROM BIT_DB.JanSales
WHERE location like '%NY%' AND length(orderID) = 6
GROUP BY location
HAVING count(orderID) > 2;

-- How many of each type of headphone were sold in February?
SELECT Product, sum(Quantity)
FROM BIT_DB.FebSales
WHERE Product like '%Headphones%'
GROUP BY Product;

-- What was the average amount spent per account in February? (Hints: For this question, we want the average amount spent / number of accounts, not the amount spent by each account. To multiply, you can use the * symbol, and to divide, you can use the / symbol.)
SELECT avg(Quantity*price)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers cust
ON FebSales.orderid=cust.order_id
WHERE length(orderID)=6 AND orderID <> 'Order ID';

-- What was the average quantity of products purchased per account in February? (Hint: just like question 3, we want the overall average, not the average for each account individually).
SELECT sum(Quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers cust ON FebSales.orderID = cust.order_id
WHERE length(orderID)=6 AND orderID <> 'Order ID';

-- Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT Product, sum(Quantity*price) Revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6 AND orderID <> 'Order ID'
GROUP BY Product
ORDER BY Revenue DESC LIMIT 1;
